import { writable } from 'svelte/store';
import { cacheArray } from './cacheArray';
export function hook(hookfunction, ...args) {
    let lastvalues = args;
    cacheArray.current = [];
    cacheArray.index = 0;
    const result = hookfunction(...args);
    const hooks = [...cacheArray.current];
    const store = writable(result);
    const run = (...args) => {
        cacheArray.current = [...hooks];
        cacheArray.index = 0;
        lastvalues = args;
        const result = hookfunction(...args);
        store.set(result);
    };
    let i = true;
    hooks.forEach((v) => {
        if ('subscribe' in v)
            v.subscribe(() => {
                if (!i)
                    run(...lastvalues);
            });
    });
    i = false;
    return {
        subscribe: store.subscribe,
        run
    };
}
export function hookGroup(hooks) {
    return hook((props) => hooks.map((h, i) => h[0](...props[i])), hooks.map((h) => h.slice(1)));
}
